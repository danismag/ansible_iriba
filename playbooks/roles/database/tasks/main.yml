---
# tasks file for roles/database
- name: install apt packages
  apt: 
    pkg:
      - libpq-dev
      - postgresql
      - python3-psycopg2
    update_cache: yes 
    cache_valid_time: 3600
  become: True

- name: copy configuration file
  template: src=postgresql.conf.j2 dest={{ database_config_path }}/postgresql.conf
  become: True
  register: conf_result
  
- name: set attributes to configuration file
  file: >
    path={{ database_config_path }}/postgresql.conf
    owner=postgres group=postgres mode=0644 state=file
  become: True
  register: attr_result
  
- name: copy client authentication configuration file
  copy: >
    src=pg_hba.conf dest={{ database_config_path }}/pg_hba.conf
    owner=postgres group=postgres mode=0640
  become: True
  register: clconf_result
  
- name: create project locale
  locale_gen: name={{ locale }}
  become: True

# Рестарт сервера БД, если произошли изменения
- name: restart postgres
  service: name=postgresql state=restarted
  become: True
  when: conf_result is changed or attr_result is changed or clconf_result is changed

- name: create a database user
  postgresql_user:
    name: "{{ database_user }}"
    password: "{{ db_pass }}"
  become: True
  become_user: postgres
  
- name: create the database
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_user }}"
    encoding: UTF8
    lc_ctype: "{{ locale }}"
    lc_collate: "{{ locale }}"
    template: template0
  become: True
  become_user: postgres

- name: create a dump directory
  file: 
    path: "{{ database_dump_path }}" 
    state: directory
    owner: postgres
  become: True

# Поиск последнего актуального дампа на упр. машине
- name: seacrh for last modified dump
  shell: ls -t {{ dump_path }}/{{ database_dump_folder }}| head -n1
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: last_dump
  when: redeploy

# Копирование последнего актуального дампа с упр. машины
- name: copy last actual db dump from master
  copy:
    src: "{{ dump_path }}/{{ database_dump_folder }}/{{ last_dump.stdout }}"
    dest: "{{ database_dump_path }}/redeploy_dump"
    group: postgres
  become: True
  when: redeploy

# Заливка последнего бэкапа с управляющей машины
- name: restore database from dump
  postgresql_db:
    name: "{{ database_name }}"
    state: restore
    target: "{{ database_dump_path }}/redeploy_dump"
  become: True
  become_user: postgres
  when: redeploy

- name: generate dump name
  shell: date +%F_%H%M%S
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: dump_name

# Бэкап БД
- name: create database dump
  postgresql_db:
    name: "{{ database_name }}"
    state: dump
    target: "{{ database_dump_path }}/{{ dump_name.stdout }}"
  become: True
  become_user: postgres

# Скопировать актуальные дампы на управляющую машину
- name: get database dumps from host
  shell: scp -pr {{ inventory_hostname }}:{{ database_dump_path }} {{ dump_path }}
  args:
    executable: /bin/bash
  delegate_to: localhost

- name: create database dump cron job
  cron: 
    name: "set task to daily database dump"
    user: postgres
    weekday: "0"
    minute: "10"
    hour: "0"
    job: pg_dump {{ database_name }} > {{ database_dump_path }}/`date +%F_%H%M%S`
  become: True
