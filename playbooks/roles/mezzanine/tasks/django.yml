---
- name: create a root directory
  file: path="{{ mezzanine_root_path }}" state=directory

- name: generate folder name of root project
  shell: date +%F_%H%M%S
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: result_root_folder_name

- set_fact: 
    mezzanine_real_root_proj_path: "{{ mezzanine_projects_path }}/{{ result_root_folder_name.stdout }}"
  
- set_fact:
    mezzanine_real_proj_path: "{{ mezzanine_real_root_proj_path }}/{{ mezzanine_proj_name }}"
    
- set_fact:
    mezzanine_real_settings_path: "{{ mezzanine_real_proj_path }}/{{ mezzanine_proj_name }}"
  
- name: create a real root_project directory
  file: path="{{ mezzanine_real_root_proj_path }}" state=directory
  
- name: create a static directory
  file: path="{{ mezzanine_static_path }}" state=directory

- name: create a media directory
  file: path="{{ mezzanine_media_path }}" state=directory  
  
- name: create a logs directory
  file: path="{{ mezzanine_logs_path }}" state=directory

- name: check out the repository on the host
  git: 
    repo={{ mezzanine_repo_url }} dest={{ mezzanine_real_root_proj_path }} accept_hostkey=yes

- name: install pip
  apt: 
    name: python3-pip
    update_cache: yes 
    cache_valid_time: 3600
  become: True

- name: install Python requirements globally via pip
  pip: 
    name: 
      - pip
      - virtualenv
      - virtualenvwrapper
    state: latest
  become: True
  
- name: install required python packages
  pip: 
    name: 
      - gunicorn
      - setproctitle
      - psycopg2-binary
      - django-compressor
      - python-memcached
    virtualenv: "{{ mezzanine_venv_path }}"
    
- name: install requirements.txt
  pip:
    requirements: "{{ mezzanine_real_proj_path }}/{{ mezzanine_reqs_path }}"
    virtualenv: "{{ mezzanine_venv_path }}"
    
- name: generate the settings file
  template: src=local_settings.py.j2 dest={{ mezzanine_real_settings_path }}/local_settings.py
  
- name: apply migrations to create the database
  django_manage:
    command: migrate
    app_path: "{{ mezzanine_real_proj_path }}"
    virtualenv: "{{ mezzanine_venv_path }}"

- name: apply collect static content
  django_manage:
    command: collectstatic
    app_path: "{{ mezzanine_real_proj_path }}"
    virtualenv: "{{ mezzanine_venv_path }}"

- name: set the site id
  script: scripts/setsite.py
  environment:
    PATH: "{{ mezzanine_venv_path }}/bin"
    PROJECT_DIR: "{{ mezzanine_real_proj_path }}"
    PROJECT_APP: "{{ mezzanine_proj_app }}"
    WEBSITE_DOMAIN: "{{ live_hostname }}"
    
- name: set the admin password
  script: scripts/setadmin.py
  environment:
    PATH: "{{ mezzanine_venv_path }}/bin"
    PROJECT_DIR: "{{ mezzanine_real_proj_path }}"
    PROJECT_APP: "{{ mezzanine_proj_app }}"
    ADMIN_PASSWORD: "{{ admin_pass }}"
    
- name: set the gunicorn config file
  template: src=gunicorn.conf.py.j2 dest={{ mezzanine_real_proj_path }}/gunicorn.conf.py
  
- name: set the supervisor config file
  template: src=supervisor.conf.j2 dest=/etc/supervisor/conf.d/mezzanine.conf
  become: True
  register: result_supervisor
 
- name: ensure nginx config path exists
  file: path={{ mezzanine_conf_path }} state=directory
  become: True
  when: tls_enabled

- name: create symlink to project folder
  file:
    src: "{{ mezzanine_real_root_proj_path }}"
    dest: "{{ mezzanine_root_proj_path }}"
    state: link
    
# Рестарт Supervisor при необходимости
- name: restart supervisor
  supervisorctl: name=gunicorn_mezzanine state=restarted
  become: True
#  when: result_supervisor is changed
